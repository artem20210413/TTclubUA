#!/usr/bin/env bash

if ! [ -x "$(command -v docker-compose)" ]; then
    shopt -s expand_aliases
    alias docker-compose='docker compose'
fi

# Змінні кольори, для зручнішої роботи з ними
RED='\033[0;31m'
WHITE='\033[1;37m'
GREEN='\033[0;32m'
ORANGE='\033[0;33m'
GREY='\033[0;37m'

# Закриває "тег" для кольорів
NC='\033[0m'

# Система, на якій запускається докер
UNAMEOUT="$(uname -s)"

# Verify operating system is supported...
case "${UNAMEOUT}" in
Linux*) MACHINE=linux ;;
Darwin*) MACHINE=mac ;;
*) MACHINE="UNKNOWN" ;;
esac

if [ "$MACHINE" == "UNKNOWN" ]; then
    echo -e "${ORANGE}Unsupported operating system [$(uname -s)]. Supports macOS, Linux, and Windows (WSL2).${NC}" >&2

    exit 1
fi

# Підключаємо .env файл
if [ -f "./.env" ]; then
    source "./.env"
else
    echo -e "${RED}Переконайтеся, що ви визначили .env файл${NC}\""

    exit 1
fi

# Вивід довідки
function show_help() {
    echo -e "${WHITE}Використання:${NC}"
    echo -e "  ${GREEN}srv${NC} ${WHITE}[COMMAND]${NC} ${GREY}[ARGS...]${NC}"

    echo
    echo -e "${WHITE}Команды:${NC}"
    echo -e "  ${GREEN}help${NC}                      ${WHITE}Виклик довідки${NC}"
    echo
    echo -e "  ${GREEN}build${NC}                     ${WHITE}Сбір образів${NC}"
    echo -e "  ${GREEN}up${NC}                        ${WHITE}Запустити всі контейнери${NC}"
    echo -e "  ${GREEN}down${NC}                      ${WHITE}Зупинити всі контейнери${NC}"
    echo -e "  ${GREEN}restart${NC}                   ${WHITE}Перезапустити всі контейнери${NC}"
    echo
    echo
    echo -e "  ${GREEN}php${NC} ${WHITE}[command]${NC}             ${WHITE}Виконати команду php${NC}"
    echo -e "  ${GREEN}composer${NC} ${WHITE}[command]${NC}        ${WHITE}Виконати команду композера${NC}"
    echo -e "  ${GREEN}artisan${NC} ${WHITE}[command]${NC}         ${WHITE}Виконати команду Artisan від імені www-data${NC}"
    echo -e "  ${GREEN}npm${NC} ${WHITE}[command]${NC}         ${WHITE}Виконати команду npm від імені www-data${NC}"
    echo -e "  ${GREEN}shell{NC} ${WHITE}[command]${NC}         ${WHITE}Войти в контейнер PHP в интерактивном режиме${NC}"
    echo
    echo -e "  ${GREEN}docker-compose${NC} ${WHITE}[command]${NC}  ${WHITE}Запускаємо команду самого docker-compose${NC}"
}

# Вивід помилки під час спроби виконати невизначену команду
function unknown_command_handler() {
    echo -e "${RED}No such command:${NC} ${ORANGE}$1${NC}"
    echo

    show_help
}

if [ $# -gt 0 ]; then
    # Виклик довідки
    if [ "$1" == "help" ]; then
        show_help

    # Сбір образів
    elif [ "$1" == "build" ]; then
        docker-compose build --no-cache

    # Запустити всі контейнери
    elif [ "$1" == "up" ]; then
        docker-compose up --no-recreate -d

    # Зупинити всі контейнери
    elif [ "$1" == "down" ]; then
        docker-compose down

    # Перезапустити всі контейнери
    elif [ "$1" == "restart" ]; then
        docker-compose down && docker-compose up --no-recreate -d

    # Виконати команду php
    elif [ "$1" == "php" ]; then
        shift 1

        docker-compose exec php-fpm php "$@"

    elif [ "$1" == "shell" ]; then
        # Войти в контейнер PHP в интерактивном режиме
        docker-compose exec php-fpm bash


    # Виконати команду композера
    elif [ "$1" == "composer" ]; then
        shift 1

        docker-compose exec php-fpm composer "$@" --working-dir=/var/www

    # Виконати команду композера
    elif [ "$1" == "npm" ]; then
        shift 1

        docker-compose exec node npm "$@"

    # Виконати команду Artisan
    elif [ "$1" == "artisan" ] || [ "$1" == 'art' ]; then
        shift 1

    docker-compose exec php-fpm su -l www-data -s /usr/local/bin/php /var/www/artisan "$@"

    # Запускаємо команду docker-compose
    elif [ "$1" == "docker-compose" ]; then
        shift 1

        docker-compose "$@"

    else
        unknown_command_handler "$@"
    fi
else
    unknown_command_handler "$@"
fi
